@page "/"
@page "/countries"

@inject CountryService CountryService
@inject NavigationManager NavigationManager

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h3>Countries</h3>
        <button class="btn btn-secondary" @onclick="ResetToDefault">Reset to Default</button>
    </div>

    @if (countries == null)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <div class="row mb-3">
            <div class="col-md-4">
                <div class="input-group">
                    <span class="input-group-text">Items per page</span>
                    <select class="form-select" @bind="pageSize" @bind:event="onchange">
                        <option value="5">5</option>
                        <option value="10">10</option>
                        <option value="20">20</option>
                        <option value="50">50</option>
                    </select>
                </div>
            </div>
            <div class="col-md-8 d-flex justify-content-end">
                <div class="input-group me-2">
                    <span class="input-group-text">Country Name</span>
                    <input type="text" class="form-control" @bind="countryNameFilter" @bind:event="oninput" placeholder="Search by name" />
                </div>
                <div class="input-group me-2">
                    <span class="input-group-text">Region</span>
                    <input type="text" class="form-control" @bind="regionFilter" @bind:event="oninput" placeholder="Search by region" />
                </div>
                <div class="input-group">
                    <span class="input-group-text">Subregion</span>
                    <input type="text" class="form-control" @bind="subregionFilter" @bind:event="oninput" placeholder="Search by subregion" />
                </div>
            </div>
        </div>

        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th>Country Name</th>
                    <th>Region</th>
                    <th>Subregion</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var country in PagedCountries)
                {
                    <tr>
                        <td><a href="javascript:void(0)" @onclick="() => NavigateToCountry(country.Name)">@country.Name</a></td>
                        <td><a href="javascript:void(0)" @onclick="() => NavigateToRegion(country.Region)">@country.Region</a></td>
                        <td><a href="javascript:void(0)" @onclick="() => NavigateToSubregion(country.Subregion)">@country.Subregion</a></td>
                    </tr>
                }
            </tbody>
        </table>

        <nav class="d-flex justify-content-between align-items-center">
            <ul class="pagination mb-0">
                <li class="page-item @(CanPreviousPage ? "" : "disabled")">
                    <button class="page-link" @onclick="PreviousPage" disabled="@(!CanPreviousPage)">Previous</button>
                </li>
                <li class="page-item disabled">
                    <span class="page-link">Page @currentPage of @totalPages</span>
                </li>
                <li class="page-item @(CanNextPage ? "" : "disabled")">
                    <button class="page-link" @onclick="NextPage" disabled="@(!CanNextPage)">Next</button>
                </li>
            </ul>
            <div class="input-group w-auto">
                <span class="input-group-text">Jump to page</span>
                <input id="jumpToPage" class="form-control" type="number" min="1" max="@totalPages" @bind="jumpToPage" @bind:event="onchange" />
                <button class="btn btn-primary" @onclick="JumpToPage">Go</button>
            </div>
        </nav>
    }
</div>

@code {
    private List<CountryDto> countries;
    private string countryNameFilter;
    private string regionFilter;
    private string subregionFilter;
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages => (int)Math.Ceiling((double)FilteredCountries.Count() / pageSize);
    private int jumpToPage = 1;

    private IEnumerable<CountryDto> PagedCountries => FilteredCountries
        .Skip((currentPage - 1) * pageSize)
        .Take(pageSize);

    private IEnumerable<CountryDto> FilteredCountries => countries
        .Where(c => (string.IsNullOrEmpty(countryNameFilter) || c.Name.Contains(countryNameFilter, StringComparison.OrdinalIgnoreCase)) &&
                    (string.IsNullOrEmpty(regionFilter) || c.Region.Contains(regionFilter, StringComparison.OrdinalIgnoreCase)) &&
                    (string.IsNullOrEmpty(subregionFilter) || c.Subregion.Contains(subregionFilter, StringComparison.OrdinalIgnoreCase)));

    protected override async Task OnInitializedAsync()
    {
        countries = await CountryService.GetAllCountriesAsync();
    }

    private void NextPage()
    {
        if (CanNextPage)
        {
            currentPage++;
        }
    }

    private void PreviousPage()
    {
        if (CanPreviousPage)
        {
            currentPage--;
        }
    }

    private bool CanPreviousPage => currentPage > 1;
    private bool CanNextPage => currentPage < totalPages;

    private void PageSizeChanged()
    {
        currentPage = 1;
        jumpToPage = 1;
    }

    private void JumpToPage()
    {
        if (jumpToPage >= 1 && jumpToPage <= totalPages)
        {
            currentPage = jumpToPage;
        }
    }

    private void ResetToDefault()
    {
        countryNameFilter = string.Empty;
        regionFilter = string.Empty;
        subregionFilter = string.Empty;
        currentPage = 1;
        pageSize = 10;
        jumpToPage = 1;
    }

    private void NavigateToCountry(string countryName)
    {
        NavigationManager.NavigateTo($"/country/{countryName}");
    }

    private void NavigateToRegion(string regionName)
    {
        NavigationManager.NavigateTo($"/region/{regionName}");
    }

    private void NavigateToSubregion(string subregionName)
    {
        NavigationManager.NavigateTo($"/subregion/{subregionName}");
    }
}